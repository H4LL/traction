#!/bin/bash

# Function to determine the correct Docker Compose command
get_docker_compose_command() {
  # Check if `docker compose` is available
  if command -v "docker" > /dev/null && docker compose version > /dev/null 2>&1; then
    echo "docker compose"
  elif command -v docker-compose > /dev/null 2>&1; then
    echo "docker-compose"
  else
    echo "Error: Neither 'docker compose' nor 'docker-compose' is installed." >&2
    exit 1
  fi
}

# Function to build Docker images
build_docker_images() {
  echo "Building Docker images..."
  echo "Building traction:plugins-acapy"
  # Check if the plugins/docker directory exists
  if [ -d "../plugins/docker" ]; then
    pushd ../plugins/docker > /dev/null
    docker build -f ./Dockerfile --tag traction:plugins-acapy ..
    popd > /dev/null
  else
    echo "Error: Directory '../plugins/docker' does not exist. Check the path."
    exit 1
  fi

  echo "Building traction:traction-agent"
  # Check if the services/aca-py directory exists
  if [ -d "../services/aca-py" ]; then
    pushd ../services/aca-py > /dev/null
    if [ -f "./Dockerfile.acapy" ]; then
      docker build -f ./Dockerfile.acapy --tag traction:traction-agent .
    else
      echo "Error: File 'Dockerfile.acapy' not found in '../services/aca-py'."
      popd > /dev/null
      exit 1
    fi
    popd > /dev/null
  else
    echo "Error: Directory '../services/aca-py' does not exist. Please verify the path."
    exit 1
  fi

  docker compose up -d

  # Capture the Docker Compose command
  compose_cmd=$(get_docker_compose_command)

  # Check if the command is empty or not set correctly
  if [ -z "$compose_cmd" ]; then
    echo "Error: Failed to determine Docker Compose command." >&2
    exit 1
  fi

  $compose_cmd up -d  
}

# Function to start Docker containers
start_docker_containers() {
  echo "Starting Docker containers..."
    # Capture the Docker Compose command
    compose_cmd=$(get_docker_compose_command)

    # Check if the command is empty or not set correctly
    if [ -z "$compose_cmd" ]; then
      echo "Error: Failed to determine Docker Compose command." >&2
      exit 1
    fi

    # Use the captured command to build, start, or stop
    $compose_cmd up -d
}

# Function to stop Docker containers
stop_docker_containers() {
  echo "Stopping Docker containers..."

  # Capture the Docker Compose command
  compose_cmd=$(get_docker_compose_command)

  # Check if the command is empty or not set correctly
  if [ -z "$compose_cmd" ]; then
    echo "Error: Failed to determine Docker Compose command." >&2
    exit 1
  fi

  # Use the captured command to stop and remove containers
  $compose_cmd down
}

# Function to restart Docker containers
restart_docker_containers() {
  echo "Restarting Docker containers..."
  stop_docker_containers
  start_docker_containers
}

# Check for Mac OS and set platform options if applicable
set_mac_os_options() {
  if [[ $OSTYPE == 'darwin'* ]]; then
    echo "Setting Mac OS specific options..."

    # Set default platform to linux/amd64 for Arm-based Macs
    architecture=$(uname -m)
    if [[ "${architecture}" == 'arm'* ]] || [[ "${architecture}" == 'aarch'* ]]; then
      export DOCKER_DEFAULT_PLATFORM=linux/amd64
    fi

    # Set date and stat options for Mac OS
    export TA_RATIFICATION_TIME_OPS='-jf '%Y-%m-%dT%H:%M:%S%Z' +%s '
    export STAT_OPS='-f '%A''
  fi
}

# Display usage information
show_usage() {
  echo "Usage: $0 {build|start|stop|restart}"
  exit 1
}

# Main function to control script flow based on user input
main() {
  set_mac_os_options

  case "$1" in
    build)
      build_docker_images
      ;;
    start)
      start_docker_containers
      ;;
    stop)
      stop_docker_containers
      ;;
    restart)
      restart_docker_containers
      ;;
    *)
      show_usage
      ;;
  esac
}

# Check if any argument is provided, otherwise show usage
if [ $# -eq 0 ]; then
  show_usage
fi

# Execute the main function with the provided argument
main "$1"